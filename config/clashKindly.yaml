# mixed-port HTTP(S) and SOCKS5 使用同一端口7890
mixed-port: 7890
# 规则模式 rule（规则） / global（全局代理）/ direct（全局直连）
mode: rule
# 允许局域网的连接 用于局域网内共享代理
allow-lan: true
# 5 个级别 silent / info / warning / error / debug
log-level: info

# RESTful API for clash 使用 0.0.0.0 时请务必设定口令以保证安全
external-controller: 127.0.0.1:9090
secret: "sun20992099"

# DNS 服务器配置 按需启用 若不配置程序内置的 DNS 服务会被关闭
dns:
  enable: true # 无特殊需求不建议启用
  listen: 0.0.0.0:53
  default-nameserver:   # 默认 dns, 用于解析 DNS 服务器 的域名
    - 223.5.5.5         # 阿里
    - 119.29.29.29      # DNSpod DNS
  # 增强模式 fake-ip 或 redir-host(已不建议使用)
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  # 在以下列表的域名将不会被解析为 fake ip，这些域名相关的解析请求将会返回它们真实的 IP 地址
  # 详细参见 https://github.com/Hackl0us/SS-Rule-Snippet/blob/master/LAZY_RULES/Clash_Premium.yaml
  fake-ip-filter:
    - '*.lan'
    - '*.localdomain'
    - '*.example'
    - '*.invalid'
    - '*.localhost'
    - '*.test'
    - '*.local'
    - '*.home.arpa'
    - 'time.*.com'
    - 'time.*.gov'
    - 'time.*.edu.cn'
    - 'time.*.apple.com'
    - 'time1.*.com'
    - 'time2.*.com'
    - 'time3.*.com'
    - 'time4.*.com'
    - 'time5.*.com'
    - 'time6.*.com'
    - 'time7.*.com'
    - 'ntp.*.com'
    - 'ntp1.*.com'
    - 'ntp2.*.com'
    - 'ntp3.*.com'
    - 'ntp4.*.com'
    - 'ntp5.*.com'
    - 'ntp6.*.com'
    - 'ntp7.*.com'
    - '*.time.edu.cn'
    - '*.ntp.org.cn'
    - '+.pool.ntp.org'
    - 'time1.cloud.tencent.com'
    - 'music.163.com'
    - '*.music.163.com'
    - '*.126.net'
    - 'musicapi.taihe.com'
    - 'music.taihe.com'
    - 'songsearch.kugou.com'
    - 'trackercdn.kugou.com'
    - '*.kuwo.cn'
    - 'api-jooxtt.sanook.com'
    - 'api.joox.com'
    - 'joox.com'
    - 'y.qq.com'
    - '*.y.qq.com'
    - 'streamoc.music.tc.qq.com'
    - 'mobileoc.music.tc.qq.com'
    - 'isure.stream.qqmusic.qq.com'
    - 'dl.stream.qqmusic.qq.com'
    - 'aqqmusic.tc.qq.com'
    - 'amobile.music.tc.qq.com'
    - '*.xiami.com'
    - '*.music.migu.cn'
    - 'music.migu.cn'
    - '*.msftconnecttest.com'
    - '*.msftncsi.com'
    - 'msftconnecttest.com'
    - 'msftncsi.com'
    - 'localhost.ptlogin2.qq.com'
    - 'localhost.sec.qq.com'
    - '+.srv.nintendo.net'
    - '+.stun.playstation.net'
    - 'xbox.*.microsoft.com'
    - 'xnotify.xboxlive.com'
    - '+.battlenet.com.cn'
    - '+.wotgame.cn'
    - '+.wggames.cn'
    - '+.wowsgame.cn'
    - '+.wargaming.net'
    - 'proxy.golang.org'
    - 'stun.*.*'
    - 'stun.*.*.*'
    - '+.stun.*.*'
    - '+.stun.*.*.*'
    - '+.stun.*.*.*.*'
    - 'heartbeat.belkin.com'
    - '*.linksys.com'
    - '*.linksyssmartwifi.com'
    - '*.router.asus.com'
    - 'mesu.apple.com'
    - 'swscan.apple.com'
    - 'swquery.apple.com'
    - 'swdownload.apple.com'
    - 'swcdn.apple.com'
    - 'swdist.apple.com'
    - 'lens.l.google.com'
    - 'stun.l.google.com'
    - '+.nflxvideo.net'
    - '*.square-enix.com'
    - '*.finalfantasyxiv.com'
    - '*.ffxiv.com'
    - '*.mcdn.bilivideo.cn
  # 所有 DNS 请求将会直接发送到服务器 不经过任何代理
  nameserver: [223.5.5.5, 119.29.29.29]
  # 当 fallback 参数被配置时 DNS 请求将同时发送至上方 nameserver 列表和下方 fallback 列表中配置的所有 DNS 服务器
  # 当解析得到的 IP 地址的地理位置不是 CN 时 clash 将会选用 fallback 中 DNS 服务器的解析结果
  fallback: ['tls://1.0.0.1', 'tls://8.8.4.4', 'https://cloudflare-dns.com/dns-query', 'https://dns.google/dns-query']
  # 这些参数是为了对抗DNS投毒 建议在 DNS 投毒严重时启用
  fallback-filter:
    geoip: true
    geoip-code: CN
    geosite:
      - gfw
    ipcidr:
      - 240.0.0.0/4
      - 0.0.0.0/32
    domain:
      - '+.google.com'
      - '+.facebook.com'
      - '+.youtube.com'
      - '+.githubusercontent.com'
      - '+.googlevideo.com'


# proxy-providers参数锚点 方便多订阅源复用
pvd-info: &pvd-info # 更新订阅周期 3天
  interval: 259200
  # 节点状态检查
  health-check:
    enable: true
    url: http://www.gstatic.com/generate_204
    interval: 600

proxy-providers:
  aca:
    # 代理提供商类型 http|file
    type: http
    # 引用参数锚点
    <<: *pvd-info
    # 排除关键字使用exclude参数(UrlCode编码)例如要排除"海外|到期"在链接后追加 &exclude=%E6%B5%B7%E5%A4%96%7C%E5%88%B0%E6%9C%9F
    # 明文：重置|专用|剩余|到期|总计|流量|expire|Expire|失联
    # URL编码：%E9%87%8D%E7%BD%AE%7C%E4%B8%93%E7%94%A8%7C%E5%89%A9%E4%BD%99%7C%E5%88%B0%E6%9C%9F%7C%E6%80%BB%E8%AE%A1%7C%E6%B5%81%E9%87%8F%7Cexpire%7CExpire%7C%E5%A4%B1%E8%81%94
    url: https://api.nexconvert.com/sub?target=clash&url=https%3A%2F%2Fapi.acaisbest.shop%2Fapi%2Fv1%2Fclient%2Fsubscribe%3Ftoken%3Db993c4b27cc833bbafe4365fb2d68581&emoji=true&list=true&scv=true&udp=true&exclude=%E9%87%8D%E7%BD%AE%7C%E4%B8%93%E7%94%A8%7C%E5%89%A9%E4%BD%99%7C%E5%88%B0%E6%9C%9F%7C%E6%80%BB%E8%AE%A1%7C%E6%B5%81%E9%87%8F%7Cexpire%7CExpire%7C%E5%A4%B1%E8%81%94
    # 订阅内容保存路径
    path: ./Providers/Proxies/aca.yaml
    # filter: 'HK|TW|US' # 过滤节点 Golang regex不支持复杂表达式 建议用订阅转换工具过滤
  aladdin:
    type: http
    <<: *pvd-info
    url: https://api.nexconvert.com/sub?target=clash&url=https%3A%2F%2Fmusic.easygourl.xyz%2Flink%2FopATa5KcZ80XlWicXWMtt2aTCGFeQmPJ%3Fconfig%3Dall&emoji=true&list=true&scv=true&udp=true&exclude=%E9%87%8D%E7%BD%AE%7C%E4%B8%93%E7%94%A8%7C%E5%89%A9%E4%BD%99%7C%E5%88%B0%E6%9C%9F%7C%E6%80%BB%E8%AE%A1%7C%E6%B5%81%E9%87%8F%7Cexpire%7CExpire%7C%E5%A4%B1%E8%81%94
    path: ./Providers/Proxies/aladdin.yaml
    
  # ======== 引用当前已有clash配置文件示例 ========
  # MyConfig:
  #   type: file
  #   path: MyConfig.yaml # 当前已有配置文件path
  #   health-check:
  #     enable: true
  #     interval: 36000
  #     url: http://www.gstatic.com/generate_204
  #   filter: 'HK|JP|VN|SG'

# 使用proxy-providers中的节点 定义锚点
all-proxy: &all-proxy
  type: select
  use:
    - aca
    - aladdin
    # - MyConfig # 引用已有配置文件

# 代理组中不支持 filter 在这处理
HK-Node: { <<: *all-proxy, filter: "港|HK|(?i)Hong" }
TW-Node: { <<: *all-proxy, filter: "台|湾|TW|(?i)Taiwan" }
JP-Node: { <<: *all-proxy, filter: "日|东京|JP|(?i)Japan" }
SG-Node: { <<: *all-proxy, filter: "新|坡|獅|SG|(?i)Singapore" }
US-Node: { <<: *all-proxy, filter: "美|US|(?i)States|American" }
Other-Node: { <<: *all-proxy, filter: "(?i)^(?!.*(?:🇭🇰|🇯🇵|🇺🇸|🇸🇬|🇨🇳|港|hk|hongkong|台|tw|taiwan|日|jp|japan|新|sg|singapore|美|us|unitedstates)).*" }

# 其他代理 自建等写在这里
# proxies:
#   - { name: "ss1", type: ss, server: server, port: 443, cipher: chacha20-ietf-poly1305, password: "password", udp: true}
#   - { name: "ss2", type: ss, server: server, port: 443, cipher: chacha20-ietf-poly1305, password: "password", udp: true}
# 定义自建代理锚点
# local-proxy: &local-proxy
#   - ss1
#   - ss2

proxy-test: &proxy-test
  type: url-test
  lazy: true
  url: http://www.gstatic.com/generate_204
  # 节点检测 间隔10分钟
  interval: 600
  tolerance: 2

# 定义自动测速节点
auto: &auto-select
  type: url-test
  lazy: true
  url: http://www.gstatic.com/generate_204
  # 节点检测 间隔10分钟
  interval: 600
  tolerance: 2
  proxies:
    <<: *all-proxy

hk-auto: &hk-auto
  <<: *proxy-test
  use:
    - HK-Node

us-auto: &us-auto
  <<: *proxy-test
  use:
    - US-Node


# 定义分流参数锚点
group-proxy: &group-proxy
  type: select
  proxies: [♻️ 自动选择, 👇 手动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, DIRECT]

# 定义代理分组 与锚点合并
proxy-groups:
  - name: 🚀 节点选择
    <<: *group-proxy

  - name: 🐟 漏网之鱼
    proxies:
      - 🚀 节点选择
    <<: *group-proxy
  
  - name: 🎯 全球直连
    proxies:
      - DIRECT
      - 🚀 节点选择

  - name: 👇 手动选择
    <<: *all-proxy

  - name: ♻️ 自动选择
    <<: *auto-select
    proxies:
      # 添加自定义节点
      # - ss1
      # - ss2

  - name: 📦 PlayStore
    proxies:
      - 🚀 节点选择
    <<: *group-proxy
  
  - name: 🤖 OpenAi
    type: select
    proxies: [🇺🇲 美国节点, 🚀 手动切换, 🇯🇵 日本节点]
  
  - name: Ⓜ️ Microsoft
    <<: *group-proxy
  
  - name: 📲 Telegram
    <<: *group-proxy
  
  - name: 🎥 YouTube
    <<: *group-proxy
  
  - name: 🌍 国外媒体
    <<: *group-proxy
  
  - name: 🆎 广告拦截
    type: select
    proxies: [REJECT, DIRECT]

  # 代理转发链 relay 示例 新版本推荐使用更快速的 tunnels 模式
  # proxies 中不应该包含 relay 节点 不支持 UDP
  # 流量示意 clash <-> vmess <-> ss1 <-> 互联网 (这样是为了用自建节点落地解决机场跳 IP 问题)
  # - name: 🔁 relay
  #   type: relay
  #   proxies: # !!!注意proxies中不能有relay节点
  #     - vmess
  #     - ss1

  # - name: 🔧 自定节点
  #   type: select
  #   proxies: *local-proxy

  
  # 节点按地区分组 当前手动选择节点 可参考auto-select锚点改为自动选择
  - name: 🇭🇰 香港节点
    type: select
    proxies:
      <<: *hk-auto
    # use:
    #   - HK-Node
  - name: 🇨🇳 台湾节点
    type: select
    use:
      - TW-Node
  - name: 🇯🇵 日本节点
    type: select
    use:
      - JP-Node
  - name: 🇸🇬 狮城节点
    type: select
    use:
      - SG-Node
  - name: 🇺🇲 美国节点
    type: select
    use:
      - US-Node

# 定义规则集参数锚点 interval 3 天更新一次足够 Meta 核心不需要 type 和 path 参数
rule-info: &rule-info
  type: http
  interval: 259200

# classical 不推荐使用 复杂度较高不建议添加太多
# classical: &rule-classical
#   behavior: classical
#   <<: *rule-info
# domain or ipcidr 推荐使用 匹配更高效
domain: &rule-domain
  behavior: domain
  <<: *rule-info

# 引用规则集
rule-providers:
  LocalAreaNetwork:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list
    path: ./Providers/Ruleset/LocalAreaNetwork.yaml
  UnBan:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/UnBan.list
    path: ./Providers/Ruleset/UnBan.yaml
  QH360:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/360.list
    path: ./Providers/Ruleset/QH360.yaml
  BanAD:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list
    path: ./Providers/Ruleset/BanAD.yaml
  BanEasyListChina:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyListChina.list
    path: ./Providers/Ruleset/BanEasyListChina.yaml
  BanEasyList:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyList.list
    path: ./Providers/Ruleset/BanEasyList.yaml
  BanProgramAD:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list
    path: ./Providers/Ruleset/BanProgramAD.yaml
  Download:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Download.list
    path: ./Providers/Ruleset/Download.yaml
  Download2:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Download.list
    path: ./Providers/Ruleset/Download2.yaml
  ChinaDomain:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list
    path: ./Providers/Ruleset/ChinaDomain.yaml
  ChinaMedia:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaMedia.list
    path: ./Providers/Ruleset/ChinaMedia.yaml
  ChinaCompanyIp:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaCompanyIp.list
    path: ./Providers/Ruleset/ChinaCompanyIp.yaml
  ChinaIp:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaIp.list
    path: ./Providers/Ruleset/ChinaIp.yaml
  Microsoft:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Microsoft.list
    path: ./Providers/Ruleset/Microsoft.yaml
  OpenAi:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/OpenAi.list
    path: ./Providers/Ruleset/OpenAi.yaml
  Telegram:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Telegram.list
    path: ./Providers/Ruleset/Telegram.yaml
  YouTube:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/YouTube.list
    path: ./Providers/Ruleset/YouTube.yaml
  ProxyMedia:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list
    path: ./Providers/Ruleset/ProxyMedia.yaml
  ProxyGFWlist:
    <<: *rule-domain
    url: https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyGFWlist.list
    path: ./Providers/Ruleset/ProxyGFWlist.yaml
  Ad: # anti-AD的广告过滤 按需启用
    <<: *rule-domain
    url: https://anti-ad.net/clash.yaml
    path: ./Providers/Ruleset/anti-ad-clash.yaml

# 自定义规则
rules:
  - RULE-SET,LocalAreaNetwork,🎯 全球直连
  - RULE-SET,UnBan,🎯 全球直连
  - RULE-SET,QH360,🎯 全球直连
  - RULE-SET,BanAD,🆎 广告拦截
  - RULE-SET,BanEasyListChina,🆎 广告拦截
  - RULE-SET,BanEasyList,🆎 广告拦截
  - RULE-SET,BanProgramAD,🆎 广告拦截
  - RULE-SET,Download,🎯 全球直连
  - RULE-SET,Download2,🎯 全球直连
  - RULE-SET,ChinaDomain,🎯 全球直连
  - RULE-SET,ChinaMedia,🎯 全球直连
  - RULE-SET,ChinaCompanyIp,🎯 全球直连
  - RULE-SET,ChinaIp,🎯 全球直连
  - RULE-SET,Microsoft,Ⓜ️ Microsoft
  - RULE-SET,OpenAi,🤖 OpenAi
  - RULE-SET,Telegram,📲 Telegram
  - RULE-SET,YouTube,🎥 YouTube
  - RULE-SET,ProxyMedia,🌍 国外媒体
  - RULE-SET,ProxyGFWlist,🚀 节点选择
  - RULE-SET,Ad,🆎 广告拦截

  # ========自定义规则 begin========
  - DOMAIN-SUFFIX,xn--ngstr-lra8j.com,📦 PlayStore
  - DOMAIN-SUFFIX,services.googleapis.cn,📦 PlayStore
  # 直连
  - DOMAIN-SUFFIX,hjgou.com,🎯 全球直连
  - DOMAIN-SUFFIX,openai-sb.com,🎯 全球直连
  - DOMAIN-SUFFIX,tool.lu,🎯 全球直连
  - DOMAIN-SUFFIX,docip.net,🎯 全球直连
  - DOMAIN-KEYWORD,bootcdn,🎯 全球直连
  - DOMAIN-KEYWORD,zjiecode,🎯 全球直连
  - DOMAIN-KEYWORD,tlivesource,🎯 全球直连
  - DOMAIN-KEYWORD,lianjia,🎯 全球直连
  - DOMAIN-SUFFIX,ke.com ,🎯 全球直连
  - DOMAIN-KEYWORD,ljcdn,🎯 全球直连
  - DOMAIN-KEYWORD,honor,🎯 全球直连
  - DOMAIN-KEYWORD,daojiale,🎯 全球直连
  - DOMAIN-KEYWORD,anjuke,🎯 全球直连
  - DOMAIN-KEYWORD,ajk,🎯 全球直连
  - DOMAIN-SUFFIX,aigcapi.me,🎯 全球直连
  # Windows 手机链接
  - DOMAIN,dcg.microsoft.com,🎯 全球直连

  # 代理
  - DOMAIN-KEYWORD,jetbrains,🚀 节点选择
  - DOMAIN,dl.google.com,🚀 节点选择
  # ========自定义规则 end========

  - GEOIP,telegram,📲 Telegram
  - GEOSITE,CN,🎯 全球直连
  - GEOIP,CN,no-resolve,🎯 全球直连
  # 上面规则都未命中
  - MATCH,🐟 漏网之鱼 # 使用漏网之鱼分组 可以理解为黑名单模式
  # - MATCH, DIRECT # 使用直连 即白名单模式 配合下方GFWList效果更佳
  # - RULE-SET,GFWList,🚀 手动切换